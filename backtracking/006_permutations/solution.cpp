#include <vector>
using std::vector;

class Solution
{
public:
    vector<vector<int>> permute(vector<int> &nums) { return dfs(0, nums); }

private:
    vector<vector<int>> dfs(int i, vector<int> &nums)
    {
        if (i == nums.size())
            return {{}};

        vector<vector<int>> resPerms;

        // Recursively generate all permutations of the remaining elements (from
        // index i+1 onward)
        vector<vector<int>> perms = dfs(i + 1, nums);

        // For each smaller permutation generated by recursion
        for (auto p : perms)
        {
            for (int j = 0; j < p.size() + 1; j++)
            {
                vector<int> pCopy(p);
                pCopy.insert(pCopy.begin() + j,
                             nums[i]); // insert nums[i] at position j
                resPerms.push_back(pCopy);
            }
        }

        return resPerms;
    }
};